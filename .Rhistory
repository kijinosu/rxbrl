pc_pkg_exists(pkg = "libxml2")
?pkgconfig
# for terminal: export PKG_CONFIG_PATH="C:/rtools44/usr/lib/pkgconfig"
make("libxml-2.0.pc")
pc_pkg_list()
pkgs <- pc_pkg_list()
View(pkgs)
pc_pkg_exists(pkg = "libxml-2.0")
pc_pkg_cflags(pkg = "libxml-2.0")
# start with rmarkdown render for processing Record01.Rmd.
library(rmarkdown)
library(rlang)
rmdpath <- file.path(getwd(),"docs","Record01.Rmd")
outputdir <- file.path(getwd(),"docs")
rmdenv <- new.env()
savedlocale <- Sys.getlocale("LC_ALL")
Sys.setlocale("LC_ALL", "English_United States.UTF-8") # Windows
# from terminal tried R CMD build and R CMD install. Both worked.
library(rxbrl)
# rxbrl-dev-02.R
# created 2025-03-19
# Scripts for developing rxbrl
#
# Start experimenting with package towards
# incorporating functions from original XBRL
# package.
library(Rcpp)
compileAttributes()
rmarkdown::render(rmdpath,
envir = rmdenv,
output_format="html_document",
output_dir = outputdir)
getwd()
rmdpath <- file.path("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01","docs","Record01.Rmd")
outputdir <- file.path("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01","docs")
rmarkdown::render(rmdpath,
envir = rmdenv,
output_format="html_document",
output_dir = outputdir)
rmarkdown::render(rmdpath,
envir = rmdenv,
output_format="html_document",
output_dir = outputdir)
rmarkdown::render(rmdpath,
envir = rmdenv,
output_format="html_document",
output_dir = outputdir)
# from terminal tried R CMD build and R CMD install. Both worked.
library(rxbrl)
?rxbrl
rxbrl::rcpp_hello_world()
rmarkdown::render(rmdpath,
envir = rmdenv,
output_format="html_document",
output_dir = outputdir)
pkg <- "package:rxbrl"
detach(name = pkg, unload = TRUE, character.only = TRUE)
devtools::uninstall("rxbrl")
utils::remove.packages("rxbrl")
#### maketools
install.packages("maketools")
library(maketools)
rmarkdown::render(rmdpath,
envir = rmdenv,
output_format="html_document",
output_dir = outputdir)
cxx_info()
r_cmd_config("CXXFLAGS")
pkgs <- pc_pkg_list()
pc_pkg_exists(pkg = "libxml-2.0")
pc_pkg_cflags(pkg = "libxml-2.0")
?pc_pkg_cflags
pc_pkg_libs(pkg = "libxml-2.0")
pc_pkg_info(pkg = "libxml-2.0")
rmarkdown::render(rmdpath,
envir = rmdenv,
output_format="html_document",
output_dir = outputdir)
Sys.getenv()
#################
install.packages("pkgbuild")
#################
install.packages("pkgbuild")
library(pkgbuild)
install.packages("pkgconfig")
library(pkgconfig)
?pkgconfig
library(pkgconfig)
library(pkgbuild)
?`pkgconfig-package`
pkgconfig::get_config()
?pkgbuild
######## try some pkgbuild tools
pkgbuild::check_build_tools()
compiler_flags()
has_build_tools(debug = TRUE)
library(maketools)
?maketools_diagnostics
package_links_to("rxbrl")
r_cmd_config()
make_info()
pc_pkg_list()
pkgs <- pc_pkg_list()
View(pkgs)
pc_pkg_info(pkg = "libxml-2.0")
# rxbrl-dev-02.R
# created 2025-03-19
# Scripts for developing rxbrl
#
# Start experimenting with package towards
# incorporating functions from original XBRL
# package.
library(Rcpp)
pkg <- "package:rxbrl"
detach(name = pkg, unload = TRUE, character.only = TRUE)
devtools::uninstall("rxbrl")
utils::remove.packages("rxbrl")
library(maketools)
cxx_info()
r_cmd_config("CXXFLAGS")
pkgs <- pc_pkg_list()
pc_pkg_exists(pkg = "libxml-2.0")
pc_pkg_cflags(pkg = "libxml-2.0")
pc_pkg_libs(pkg = "libxml-2.0")
pc_pkg_info(pkg = "libxml-2.0")
Sys.getenv()
library(pkgbuild)
library(pkgconfig)
pkgconfig::get_config()
?get_config
pc_pkg_info(pkg = "libxml-2.0")
pc_pkg_libs(pkg = "libxml-2.0")
pc_pkg_cflags(pkg = "libxml-2.0")
###################
## try PKI example from https://cran.r-project.org/bin/windows/base/howto-R-4.4.html
install.packages("PKI", type="source")
## trin RcppCWB example
library(devtools)
devtools::install_github("PolMine/RcppCWB")
compiler_flags()
######## try some pkgbuild tools
pkgbuild::check_build_tools()
cxx_info()
pc_pkg_cflags(pkg = "libxml-2.0")
pkgconfig::get_config(PKG_CPPFLAGS)
pkgconfig::get_config("PKG_CPPFLAGS")
pkgconfig::get_config("CPPFLAGS")
## According to https://cran.r-project.org/doc/manuals/R-exts.html#Checking-packages,
## Makevars.ucrt takes precedence over Makevars.win
## Use the R_HOME indirection to support installations of multiple R version
## This is a revised Makevars.ucrt based on
## https://cran.r-project.org/bin/windows/base/howto-R-4.4.html and
## https://svn.r-project.org/R-dev-web/trunk/WindowsBuilds/winutf8/ucrt3/r_packages/patches/CRAN/XBRL.diff
##
## R_HOME                              C:/PROGRA~1/R/R-44~1.0
## R_ARCH                              /x64
## Need R_ARCH_BIN
Sys.setenv(R_ARCH_BIN = R_ARCH)
Sys.getenv("R_ARCH")
## According to https://cran.r-project.org/doc/manuals/R-exts.html#Checking-packages,
## Makevars.ucrt takes precedence over Makevars.win
## Use the R_HOME indirection to support installations of multiple R version
## This is a revised Makevars.ucrt based on
## https://cran.r-project.org/bin/windows/base/howto-R-4.4.html and
## https://svn.r-project.org/R-dev-web/trunk/WindowsBuilds/winutf8/ucrt3/r_packages/patches/CRAN/XBRL.diff
##
## R_HOME                              C:/PROGRA~1/R/R-44~1.0
## R_ARCH                              /x64
## Need R_ARCH_BIN
Sys.setenv(R_ARCH_BIN = Sys.getenv("R_ARCH"))
Sys.getenv()
## Need R_TOOLS_SOFT
Sys.setenv(R_TOOLS_SOFT = "C:/rtools44/usr/lib/mxe/usr/x86_64-w64-mingw32.static.posix")
pkgconfig::get_config("PKG_CXXFLAGS")
pkgconfig::get_config(PKG_CXXFLAGS)
compiler_flags()
?compiler_flags
compiler_flags(TRUE)
has_build_tools(debug = TRUE)
make_info()
Rcpp::compileAttributes()
Sys.getenv()
?Rcpp::LdFlags
Rcpp:::LdFlags()
getOption("verbose")
setOption("verbose", TRUE)
?setOption
?getOption
options(verbose = TRUE)
sessionInfo()
?sourceCpp
Rcpp::sourceCpp("src/RcppExports.cpp")
Rcpp::sourceCpp("src/xbrlFree.cpp")
Rcpp::sourceCpp("src/xbrlFree.cpp")
compiler_flags(TRUE)
######## try some pkgbuild tools
pkgbuild::check_build_tools()
make_info()
cxx_info()
Sys.getenv()
compiler_flags(TRUE)
?rxbrl
compileAttributes()
# rxbrl-dev-02.R
# created 2025-03-19
# Scripts for developing rxbrl
#
# Start experimenting with package towards
# incorporating functions from original XBRL
# package.
library(Rcpp)
compileAttributes()
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
library(rlang)
#
#
tenv <- new.env()
tenv$xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
tenv$cache <- "XBRLcache"
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
tenv$xbrl <- XBRL()
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
tenv$xbrl <- XBRL()
tenv$xbrl$setVerbose(TRUE)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
tenv$xbrl$setCacheDir(tenv$cache)
tenv$cache <- "../XBRLcache"
tenv$xbrl <- XBRL()
tenv$xbrl$setVerbose(TRUE)
tenv$xbrl$setCacheDir(tenv$cache)
unlink(tenv$cache)
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
library(rlang)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
View(tenv)
tenv$cache <- "../XBRLcache"
tenv$xbrl <- XBRL()
View(tenv)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
library(rlang)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
#
#
tenv <- new.env()
tenv$xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
tenv$cache <- "../XBRLcache"
tenv$xbrl <- XBRL()
tenv$xbrl$setVerbose(TRUE)
tenv$xbrl$setCacheDir(tenv$cache)
tenv$xbrl$openInstance(tenv$xmlpath)
closeInstance <- function() {
.Call("xbrlFree", doc.inst, PACKAGE="rxbrl")
doc.inst <<- NULL
}
tenv$xbrl$openInstance(tenv$xmlpath)
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/xbrlParse.R")
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
library(rlang)
#
#
tenv <- new.env()
tenv$xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
tenv$cache <- "../XBRLcache"
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/xbrlParse.R")
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
tenv$xbrl <- XBRL()
tenv$xbrl$setVerbose(TRUE)
tenv$xbrl$setCacheDir(tenv$cache)
tenv$xbrl$openInstance(tenv$xmlpath)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
tenv$xbrl$closeInstance()
xbrl.vars <- tenv$xbrl$getResults()
unlink(tenv$cache)
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
library(rlang)
#
#
tenv <- new.env()
tenv$xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
tenv$cache <- "../XBRLcache"
tenv$xbrl <- XBRL()
tenv$xbrl$setVerbose(TRUE)
tenv$xbrl$setCacheDir(tenv$cache)
tenv$xbrl$openInstance(tenv$xmlpath)
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
library(rlang)
#
#
tenv <- new.env()
tenv$xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
tenv$cache <- "../XBRLcache"
tenv$xbrl <- XBRL()
tenv$xbrl$setVerbose(TRUE)
tenv$xbrl$setCacheDir(tenv$cache)
tenv$xbrl$openInstance(tenv$xmlpath)
tenv$schemaname <- tenv$xbrl$getSchemaName()
View(tenv)
#
#
tenv <- new.env()
tenv$xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
tenv$cache <- "../XBRLcache"
tenv$xbrl <- XBRL()
tenv$xbrl$setVerbose(TRUE)
tenv$xbrl$setCacheDir(tenv$cache)
tenv$xbrl$openInstance(tenv$xmlpath)
tenv$schemaname <- tenv$xbrl$getSchemaName()
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
tenv$schemaname <- tenv$xbrl$getSchemaName()
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
#
#
tenv <- new.env()
tenv$xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
tenv$cache <- "../XBRLcache"
tenv$xbrl <- XBRL()
tenv$xbrl$setVerbose(TRUE)
tenv$xbrl$setCacheDir(tenv$cache)
tenv$xbrl$openInstance(tenv$xmlpath)
tenv$xbrl$getSchemaName()
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
library(rlang)
#
#
tenv <- new.env()
tenv$xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
tenv$cache <- "../XBRLcache"
tenv$xbrl <- XBRL()
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
#
#
tenv <- new.env()
tenv$xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
tenv$cache <- "../XBRLcache"
tenv$xbrl <- XBRL()
tenv$xbrl$setVerbose(TRUE)
tenv$xbrl$setCacheDir(tenv$cache)
tenv$xbrl$openInstance(tenv$xmlpath)
tenv$xbrl$processSchema(tenv$xbrl$getSchemaName())
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
cache <- "../XBRLcache"
xbrl <- XBRL()
xbrl$setVerbose(TRUE)
xbrl$setCacheDir(cache)
xbrl$openInstance(xmlpath)
xbrl$getSchemaName()
xbrl$processSchema(xbrl$getSchemaName())
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xbrl$processSchema(xbrl$getSchemaName())
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
schemaname <- xbrl$getSchemaName()
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xbrl$processSchema(schemaname)
xbrl$closeInstance()
xbrl.vars <- xbrl$getResults()
unlink(cache)
rm(tenv)
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xmlpath <- "C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/data/abt-20131231/abt-20131231.xml"
cache <- "../XBRLcache"
xbrl <- XBRL()
xbrl$setVerbose(TRUE)
xbrl$setCacheDir(cache)
xbrl$openInstance(xmlpath)
schemaname <- xbrl$getSchemaName()
}
processRoles <- function(doc) {
if (verbose) {
cat("Roles\n")
}
self$role <<- rbind(self$role,
.Call("xbrlProcessRoles", doc, PACKAGE="rxbrl"))
}
xbrl$processSchema(schemaname)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xbrl$processSchema(schemaname)
xbrl$closeInstance()
xbrl <- XBRL()
xbrl$setVerbose(TRUE)
xbrl$setCacheDir(cache)
xbrl$openInstance(xmlpath)
schemaname <- xbrl$getSchemaName()
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xbrl$processSchema(xbrl$getSchemaName())
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xbrl$processSchema(xbrl$getSchemaName())
xbrl <- XBRL()
xbrl$setVerbose(TRUE)
xbrl$setCacheDir(cache)
xbrl$openInstance(xmlpath)
schemaname <- xbrl$getSchemaName()
xbrl$processSchema(xbrl$getSchemaName())
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xbrl <- XBRL()
xbrl$setVerbose(TRUE)
xbrl$setCacheDir(cache)
xbrl$openInstance(xmlpath)
schemaname <- xbrl$getSchemaName()
for (importName in importNames) {
importName <- fixFileName(dname, importName)
if (verbose) {
cat(file," ==> Schema: ", importName,"\n")
}
processSchema(importName, level+1)
}
processSchema <- function(file, level=1) {
if (verbose) {
cat("Schema: ", file, "\n")
}
if (length(which(discovered.files == file)) > 0) {
if (verbose) {
cat("Already discovered. Skipping\n")
}
return (NULL)
}
discovered.files <<- c(discovered.files, file)
dname <- dirname(file)
if (level >= 1 && !is.null(cache.dir)) {
if (verbose) {
cat("Level:", level,  "==>", file, "\n")
}
file <- fileFromCache(file)
if (level == 1) {
inst.lnkb <<- c(inst.lnkb, file)
}
}
doc <- rxbrl::xbrlParse(file)
if (level == 1) {
processRoles(doc)
}
processElements(doc)
linkbaseNames <- .Call("xbrlGetLinkbaseNames", doc, PACKAGE="rxbrl")
importNames <- .Call("xbrlGetImportNames", doc, PACKAGE="rxbrl")
.Call("xbrlFree", doc, PACKAGE="rxbrl")
for (linkbaseName in linkbaseNames) {
linkbaseName <- fixFileName(dname, linkbaseName)
if (verbose) {
cat(file," ==> Linkbase: ", linkbaseName,"\n")
}
processLinkbase(linkbaseName, level+1)
}
for (importName in importNames) {
importName <- fixFileName(dname, importName)
if (verbose) {
cat(file," ==> Schema: ", importName,"\n")
}
processSchema(importName, level+1)
}
}
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xbrl$processSchema(schemaname)
# rxbrl-test-01.R
# created: 2025-03-24
# Purpose: Test script for running rxbrl on real data
library(rxbrl)
xbrl <- XBRL()
xbrl$setVerbose(TRUE)
xbrl$setCacheDir(cache)
xbrl$openInstance(xmlpath)
schemaname <- xbrl$getSchemaName()
xbrl$processSchema(schemaname)
debugSource("C:/Users/Alan/Dropbox/_RStudioProjects/rxbrlDev01/rxbrl/R/rxbrl.R")
xbrl$processSchema(schemaname)
xbrl$processSchema(schemaname)
xbrl$closeInstance()
xbrl.vars <- xbrl$getResults()
unlink(cache)
xbrl <- XBRL()
xbrl$setVerbose(TRUE)
xbrl$setCacheDir(cache)
xbrl$openInstance(xmlpath)
schemaname <- xbrl$getSchemaName()
xbrl$processSchema(schemaname)
